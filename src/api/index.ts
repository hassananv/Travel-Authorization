import express, { Request, Response } from "express";
import cors from "cors";
import path from "path";
import helmet from "helmet";

import * as config from './config';
import { doHealthCheck } from './utils/healthCheck';
import { configureAuthentication } from './routes/auth';
import { RequiresAuthentication } from './middleware';


import { userRouter, placeRouter, photoRouter, registerRouter, staticRouter, ytPlaceRouter, peopleRouter, photoOwnersRouter } from "./routes";
import { boatsRouter, ownerRouter, aircrashRouter, historiesRouter, catalogsRouter, usersExtraRouter, photosExtraRouter } from "./routes";


/*
var ownersRouter = require('./controllers/owners');
var historiesRouter = require('./controllers/histories');
var aircrashRouter = require('./controllers/aircrash');
var catalogsRouter = require('./controllers/catalogs');
var usersRouter = require('./controllers/users');
var peopleRouter = require('./controllers/people');
var photoOwners = require('./controllers/photoOwners');
var boatsRouter = require('./controllers/boats');
var photosRouter = require('./controllers/photos');*/

var knex = require('knex');

const app = express();

app.use(express.json()); // for parsing application/json
app.use(express.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded

app.use(
	helmet.contentSecurityPolicy({
	  directives: {
		'default-src': ["'self'"],
		'base-uri': ["'self'"],
		'block-all-mixed-content': [],
		'font-src': ["'self'", 'https:', 'data:'],
		'frame-ancestors': ["'self'"],
		'img-src': ["'self'", 'data:', 'https:'],
		'object-src': ["'none'"],
		'script-src': ["'self'", 'https://js.arcgis.com', "'unsafe-eval'"], // added https to accomodate esri components?
		'script-src-attr': ["'none'"],
		'style-src': ["'self'", 'https:', "'unsafe-inline'"],
		'worker-src': ["'self'", 'blob:'],
		'connect-src': ["'self'", 'https://*.arcgis.com', 'https://services.arcgisonline.com']
	  },
	})
  );
  
app.use(
	cors({
		origin: config.FRONTEND_URL,
		optionsSuccessStatus: 200,
		credentials: true,
	})
);

configureAuthentication(app);

app.get('/api/healthCheck', (req: Request, res: Response) => {
	res.send('API is up!');
});

console.log('host: ', process.env.DB_HOST);
console.log('user: ', process.env.DB_USER);
console.log('psss: ', process.env.DB_PASS);
console.log('db name: ', process.env.DB_NAME);

var conn = knex({
	client: 'mssql',
	connection: {
		host: process.env.DB_HOST,
		user: process.env.DB_USER,
		password: process.env.DB_PASS,
		database: process.env.DB_NAME,
		options: {
			enableArithAbort: true,
		},
	},
	useNullAsDefault: true,
});

app.set('db', conn);

app.use("/api/user", RequiresAuthentication, userRouter);
app.use("/api/place", RequiresAuthentication, placeRouter);
app.use("/api/ytplace", RequiresAuthentication, ytPlaceRouter);
app.use("/api/photo", RequiresAuthentication, photoRouter);
app.use("/api/register", registerRouter);

app.use('/api/boats', RequiresAuthentication, boatsRouter);
app.use('/api/owners', RequiresAuthentication, ownerRouter);
app.use('/api/aircrash', RequiresAuthentication, aircrashRouter);
app.use('/api/histories', RequiresAuthentication, historiesRouter);
app.use('/api/catalogs', RequiresAuthentication, catalogsRouter);
app.use('/api/people', RequiresAuthentication, peopleRouter);
app.use('/api/photo-owners', RequiresAuthentication, photoOwnersRouter);
// app.use('/api/extras/photos', RequiresAuthentication, photosExtraRouter);
// app.use('/api/extras/users', RequiresAuthentication, usersExtraRouter);

app.use("/api", RequiresAuthentication, staticRouter);

/*
app.use('/api/photos', photosRouter);
app.use('/api/users', usersRouter);
app.use('/api/people', peopleRouter);
app.use('/api/photo-owners', photoOwners);
*/


// serves the static files generated by the front-end
app.use(express.static(path.join(__dirname, 'web')));

// if no other routes match, just send the front-end
app.use((req: Request, res: Response) => {
  res.sendFile(path.join(__dirname, 'web') + "/index.html")
})

app.listen(config.API_PORT, () => {
	console.log(`API listening on port ${config.API_PORT}`);
});
