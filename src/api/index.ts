import express, { Request, Response } from 'express';
import cors from 'cors';
import path from 'path';
import helmet from 'helmet';

import * as config from './config';
import { doHealthCheck } from './utils/healthCheck';
import { configureAuthentication } from './routes/auth';
import { RequiresAuthentication } from './middleware';

import {
	userRouter,
	ownerRouter,
	formRouter,
	lookupRouter,
	permRouter,
} from './routes';

var knex = require('knex');

const app = express();

app.use(express.json()); // for parsing application/json
app.use(express.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded

app.use(
	helmet.contentSecurityPolicy({
		directives: {
			'default-src': ["'self'"],
			'base-uri': ["'self'"],
			'block-all-mixed-content': [],
			'font-src': ["'self'", 'https:', 'data:'],
			'frame-ancestors': ["'self'"],
			'img-src': ["'self'", 'data:', 'https:'],
			'object-src': ["'none'"],
			'script-src': ["'self'", 'https://js.arcgis.com', "'unsafe-eval'"], // added https to accomodate esri components?
			'script-src-attr': ["'none'"],
			'style-src': ["'self'", 'https:', "'unsafe-inline'"],
			'worker-src': ["'self'", 'blob:'],
			'connect-src': [
				"'self'",
				'https://*.arcgis.com',
				'https://services.arcgisonline.com',
			],
		},
	})
);

app.use(
	cors({
		origin: config.FRONTEND_URL,
		optionsSuccessStatus: 200,
		credentials: true,
	})
);

configureAuthentication(app);

app.get('/api/healthCheck', (req: Request, res: Response) => {
	res.send('API is up!');
});

console.log('host: ', process.env.DB_HOST);
console.log('user: ', process.env.DB_USER);
console.log('psss: ', process.env.DB_PASS);
console.log('db name: ', process.env.DB_NAME);

var conn = knex({
	client: 'mssql',
	connection: {
		host: process.env.DB_HOST,
		user: process.env.DB_USER,
		password: process.env.DB_PASS,
		database: process.env.DB_NAME,
		options: {
			enableArithAbort: true,
		},
	},
	useNullAsDefault: true,
});

app.set('db', conn);

app.use('/api/user', RequiresAuthentication, userRouter);
app.use('/api/owners', RequiresAuthentication, ownerRouter);
app.use('/api/form', RequiresAuthentication, formRouter);
app.use('/api/permissions', RequiresAuthentication, permRouter);
app.use('/api/lookup', lookupRouter);

// serves the static files generated by the front-end
app.use(express.static(path.join(__dirname, 'web')));

// if no other routes match, just send the front-end
app.use((req: Request, res: Response) => {
	res.sendFile(path.join(__dirname, 'web') + '/index.html');
});

app.listen(config.API_PORT, () => {
	console.log(`API listening on port ${config.API_PORT}`);
});
